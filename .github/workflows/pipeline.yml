name: Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      api_changes: ${{ steps.changes.outputs.api }}
      web_changes: ${{ steps.changes.outputs.web }}
      trace_tag: ${{ steps.trace.outputs.trace_tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Determine trace tag
        id: trace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch="${{ github.ref_name }}"
          echo "Current branch: $branch"

          if [[ "$branch" == "main" ]]; then
            trace_tag=$(git rev-parse --short=6 HEAD)
            echo "trace_tag=$trace_tag" >> $GITHUB_OUTPUT
            echo "‚úÖ Trace tag set to commit: $trace_tag"
          else
            pr=$(gh pr list --head "$branch" --state open --json number --jq '.[0].number')

            if [[ -n "$pr" ]]; then
              echo "trace_tag=pr-$pr" >> $GITHUB_OUTPUT
              echo "‚úÖ Trace tag set to PR: pr-$pr"
            else
              echo "üö´ No open PR found for branch '$branch'. The pipeline can only be run on merge to main or from a branch with a connected PR."
              exit 1
            fi
          fi

      - name: Detect module file changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'

  api-build:
    runs-on: ubuntu-latest
    needs: init
    if: needs.init.outputs.api_changes == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up SSH key for tunnel
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_API_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_API_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Start SSH tunnel to Postgres
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -N -L 5432:localhost:${{ vars.API_DB_PORT }} ${{ secrets.DEPLOY_API_SSH_USER }}@${{ secrets.DEPLOY_API_SSH_HOST }} &

      - name: Check if SSH tunnel is working
        run: |
          for i in {1..10}; do
            if nc -z localhost 5432; then
              echo "‚úÖ SSH tunnel to Postgres is working!"
              exit 0
            else
              echo "Waiting for SSH tunnel... attempt $i"
              sleep 2
            fi
          done

          echo "‚ùå SSH tunnel to Postgres failed!"
          exit 1

      - name: Generate .env file
        run: |
          {
            echo "API_DB_HOST=localhost"
            echo "API_DB_PORT=${{ vars.API_DB_PORT }}"
            echo "API_DB_DATABASE=${{ vars.API_DB_DATABASE }}"
            echo "API_DB_USER=${{ secrets.API_DB_USER }}"
            echo "API_DB_PASSWORD=${{ secrets.API_DB_PASSWORD }}"
            echo "API_AWS_S3_ACCESS_KEY=${{ secrets.API_AWS_ACCESS_KEY }}"
            echo "API_AWS_S3_SECRET_KEY=${{ secrets.API_AWS_SECRET_KEY }}"
            echo "API_AWS_S3_REGION=${{ vars.API_AWS_REGION }}"
            echo "API_AWS_S3_BUCKET_NAME=${{ vars.API_AWS_S3_BUCKET_NAME }}"
            echo "API_ALLOWED_ORIGINS=${{ vars.API_ALLOWED_ORIGINS }}"
            echo "DOCKER_API_IMAGE_TAG=${{ vars.DOCKER_API_IMAGE_TAG }}"
            echo "DOCKER_REPO=${{ vars.DOCKER_REPO }}"
          } > .env

      - name: Build Java
        run: |
          cd api
          ./mvnw clean install

      - name: Build and Push Docker Image
        env:
          TRACE_TAG: ${{ needs.init.outputs.trace_tag }}
        run: |
          cd api && docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ vars.DOCKER_REPO }}:${{ vars.DOCKER_API_IMAGE_TAG }} \
            -t ${{ vars.DOCKER_REPO }}:${{ env.TRACE_TAG }} \
            --push .

  api-deploy:
    runs-on: ubuntu-latest
    needs: api-build
    if: needs.init.outputs.api_changes == 'true'
    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.DEPLOY_API_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh 
          ssh-keyscan -H ${{ secrets.DEPLOY_API_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Generate .env file
        run: |
          {
            echo "API_DB_HOST=${{ vars.API_DB_HOST }}"
            echo "API_DB_PORT=${{ vars.API_DB_PORT }}"
            echo "API_DB_DATABASE=${{ vars.API_DB_DATABASE }}"
            echo "API_DB_USER=${{ secrets.API_DB_USER }}"
            echo "API_DB_PASSWORD=${{ secrets.API_DB_PASSWORD }}"
            echo "API_AWS_S3_ACCESS_KEY=${{ secrets.API_AWS_ACCESS_KEY }}"
            echo "API_AWS_S3_SECRET_KEY=${{ secrets.API_AWS_SECRET_KEY }}"
            echo "API_AWS_S3_REGION=${{ vars.API_AWS_REGION }}"
            echo "API_AWS_S3_BUCKET_NAME=${{ vars.API_AWS_S3_BUCKET_NAME }}"
            echo "API_ALLOWED_ORIGINS=${{ vars.API_ALLOWED_ORIGINS }}"
            echo "DOCKER_API_IMAGE_TAG=${{ vars.DOCKER_API_IMAGE_TAG }}"
            echo "DOCKER_REPO=${{ vars.DOCKER_REPO }}"
          } > .env

      - name: Upload .env to EC2 home directory
        run: |
          scp -i key.pem .env ${{ secrets.DEPLOY_API_SSH_USER }}@${{ secrets.DEPLOY_API_SSH_HOST }}:~/

      - name: Move .env into /opt/docker
        run: |
          ssh -i key.pem ${{ secrets.DEPLOY_API_SSH_USER }}@${{ secrets.DEPLOY_API_SSH_HOST }} '
          sudo mv -f ~/\.env /opt/docker/.env
          '

      - name: SSH and run docker-compose
        run: |
          ssh -i key.pem ${{ secrets.DEPLOY_API_SSH_USER }}@${{ secrets.DEPLOY_API_SSH_HOST }} << EOF
            set -e
            cd /opt/docker
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF

      - name: Wait for API to be ready
        run: |
          ssh -i key.pem ${{ secrets.DEPLOY_API_SSH_USER }}@${{ secrets.DEPLOY_API_SSH_HOST }} '
            timeout=${{ vars.DEPLOY_API_STARTUP_TIMEOUT }}
            elapsed=0
            until docker logs api 2>&1 | grep "Started MainApplication"; do
              sleep 3
              elapsed=$((elapsed + 3))
              if [ $elapsed -ge $timeout ]; then
                echo "‚ùå API did not become ready within $timeout seconds."
                exit 1
              fi
            done
          '

  web-build:
    runs-on: ubuntu-latest
    needs: [init, api-deploy]
    if: |
      needs.init.outputs.web_changes == 'true' &&
      (needs.api-deploy.result == 'success' || needs.api-deploy.result == 'skipped') && always()
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: cd web && npm ci

      - name: Build frontend
        env:
          VITE_ENV: ${{ vars.VITE_ENV }}
          VITE_APP_VERSION: ${{ needs.init.outputs.trace_tag }}
          VITE_BUILD_USERNAME: ${{ secrets.VITE_BUILD_USERNAME }}
          VITE_BUILD_PASSWORD: ${{ secrets.VITE_BUILD_PASSWORD }}
          VITE_FRONTEND_URL: ${{ vars.VITE_FRONTEND_URL }}
          VITE_BACKEND_URL: ${{ vars.VITE_BACKEND_URL }}
          VITE_BACKEND_PROXY_SLUG: ${{ vars.VITE_BACKEND_PROXY_SLUG }}
        run: cd web && npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web/dist/static

  web-deploy:
    runs-on: ubuntu-latest
    needs: web-build
    if: needs.init.outputs.web_changes == 'true' && always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOY_SECRET_KEY }}
          aws-region: us-east-1

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: ./dist/static

      - name: Sync to S3
        run: aws s3 sync ./dist/static s3://${{ vars.DEPLOY_WEB_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        if: vars.DEPLOY_WEB_CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.DEPLOY_WEB_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"