import ReactDOMServer from 'react-dom/server';
import { StaticRouter } from 'react-router-dom/server';

import * as U from '@utils';
import { logIn } from '@data/auth/api';
import { PreloadedDataProvider } from '@hooks/usePreloadedData';
import { getAllWebEditEntitiesByLang } from '@data/webedit/api';

import Root, { fallBackLocale } from '@root';
import { HelmetProvider } from 'react-helmet-async';
import { instance } from '@data/api';

// Re-export as this is needed by the build script

export { routesCSR, routesSSR } from '@root';

/**
 * Async function for getting web edit data. This is used during build (and in
 * dev server) to inject data into PreloadedDataProvider. See (link)[link]
 * for more information about this application design.
 */

export async function getDataForPreloadingServerSide(
  env: Record<string, string>,
) {
  // First add the cookie jar interceptors so that authentication cookies can
  // be stored when run on server side.

  const ejectCookieJar = U.useAxiosCookieJar(instance);

  await logIn(
    {
      username: env.VITE_BUILD_USERNAME,
      password: env.VITE_BUILD_PASSWORD,
    },
    env.VITE_BACKEND_URL,
  );

  const res = await getAllWebEditEntitiesByLang(
    { fallBackLocale },
    env.VITE_BACKEND_URL,
  );

  ejectCookieJar();
  return res;
}

/**
 * This is the function called by reactDom.renderToString when the application
 * is statically generated by the build script. See (link)[link] for more
 * information about the application architecture.
 */

export interface RenderSSRProps {
  path: string | Partial<Location>;
  helmetContext: any;
  data: Record<string, any>;
}

export function renderSSR({ path, data, helmetContext }: RenderSSRProps) {
  return ReactDOMServer.renderToString(
    <StaticRouter location={path}>
      <PreloadedDataProvider value={data}>
        <HelmetProvider context={helmetContext}>
          <Root />
        </HelmetProvider>
      </PreloadedDataProvider>
    </StaticRouter>,
  );
}
